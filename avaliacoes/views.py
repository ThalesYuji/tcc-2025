from rest_framework import viewsets
from django.db import models
from .models import Avaliacao
from .serializers import AvaliacaoSerializer
from .permissoes import PermissaoAvaliacao
from rest_framework.permissions import IsAuthenticated
from rest_framework.decorators import action
from rest_framework.response import Response
from notificacoes.utils import enviar_notificacao


class AvaliacaoViewSet(viewsets.ModelViewSet):
    """
    CRUD completo de avalia√ß√µes.
    Inclui:
    - Listagem de avalia√ß√µes do usu√°rio logado (feitas e recebidas)
    - Cria√ß√£o com notifica√ß√£o autom√°tica
    """
    queryset = Avaliacao.objects.all().order_by("-id")  # ‚úÖ ordena√ß√£o global adicionada
    serializer_class = AvaliacaoSerializer
    permission_classes = [IsAuthenticated, PermissaoAvaliacao]

    def get_queryset(self):
        """
        Retorna avalia√ß√µes conforme permiss√µes:
        - Superusu√°rio ‚Üí todas
        - Usu√°rio comum ‚Üí avalia√ß√µes feitas ou recebidas
        """
        user = self.request.user
        if user.is_superuser:
            return Avaliacao.objects.all().order_by("-id")

        return (
            Avaliacao.objects.filter(
                models.Q(avaliador=user) | models.Q(avaliado=user)
            )
            .distinct()
            .order_by("-data_avaliacao", "-id")  # ‚úÖ ordena√ß√£o segura
        )

    def perform_create(self, serializer):
        """
        Cria uma nova avalia√ß√£o e envia notifica√ß√£o autom√°tica ao avaliado.
        """
        avaliacao = serializer.save(avaliador=self.request.user)

        # üîπ Notifica√ß√£o ao avaliado
        enviar_notificacao(
            usuario=avaliacao.avaliado,
            mensagem=(
                f"Voc√™ recebeu uma nova avalia√ß√£o de {avaliacao.avaliador.nome}: "
                f"'{avaliacao.comentario}'"
            ),
            link="/avaliacoes"
        )

    @action(detail=False, methods=["get"])
    def feitas(self, request):
        """üîπ Retorna avalia√ß√µes feitas pelo usu√°rio logado"""
        avaliacoes = (
            Avaliacao.objects.filter(avaliador=request.user)
            .select_related("avaliador", "avaliado", "contrato")
            .order_by("-data_avaliacao", "-id")  # ‚úÖ corre√ß√£o aplicada
        )
        serializer = self.get_serializer(avaliacoes, many=True)
        return Response(serializer.data)

    @action(detail=False, methods=["get"])
    def recebidas(self, request):
        """üîπ Retorna avalia√ß√µes recebidas pelo usu√°rio logado"""
        avaliacoes = (
            Avaliacao.objects.filter(avaliado=request.user)
            .select_related("avaliador", "avaliado", "contrato")
            .order_by("-data_avaliacao", "-id")  # ‚úÖ corre√ß√£o aplicada
        )
        serializer = self.get_serializer(avaliacoes, many=True)
        return Response(serializer.data)
